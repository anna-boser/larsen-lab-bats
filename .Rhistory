ggplot() +
geom_raster(data = bat_occ_df, aes(x=x, y=y, fill=spline)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord))
# Make a function that only keeps points that are within r from a point
spot_filter <- function(d, x_center, y_center, r){
# first do a rough approximation
d <- filter(d, x > x_center-r, x < x_center+r, y > y_center-r, y < y_center+r)
# then go over and get rid of the corners
d$dist = sqrt((d$x - x_center)^2+(d$y - y_center)^2)
d <- d[d$dist<r,]
return(d)
}
d <- spot_filter(d=bat_occ_df, x_center=x_roosts[1], y_center=y_roosts[1], r=0.05)
ggplot(d) +
geom_point(aes(x=dist, y=bats))
# fit some exponential
fit <- lm(log(bats) ~ log(dist), data = d)
ggplot(d) +
geom_point(aes(x=dist, y=bats)) +
geom_line(aes(x=dist, y=exp(fit$fitted.values)), color = "red")
# fit some exponential
fit <- glm(bats/max(bats) ~ dist, family = "binomial", data = d)
ggplot(d) +
geom_point(aes(x=dist, y=bats)) +
geom_line(aes(x=dist, y=fit$fitted.values*max(bats)), color = "red")
# 1: add a column for distance to each roost to bat_occ_df
add_dist_col <- function(d, roost_num){
x_center = bat_roosts$xcoord[roost_num]
y_center = bat_roosts$ycoord[roost_num]
d[paste0("dist", roost_num)] = sqrt((d$x - x_center)^2+(d$y - y_center)^2)
return(d)
}
for (i in 1:nrow(bat_roosts)){
bat_occ_df <- add_dist_col(bat_occ_df, i)
}
# 2: Fit a separate logistic regression for each roost based on the closest 0.05 degrees
# and
# 3: generate predictions for each roost regression
logistic_pred <- function(d, roost_num, r){
d['dist'] <- d[paste0("dist", roost_num)]
save <- d
d <- d[d['dist']<r,]
max_bats = max(d$bats)
fit <- glm(bats/max_bats ~ dist, family = "binomial", data = d)
plot <- ggplot(d) +
geom_point(aes(x=dist, y=bats)) +
geom_line(aes(x=dist, y=fit$fitted.values*max_bats), color = "red") +
ggtitle(paste("logistic", bat_roosts$xcoord[roost_num], bat_roosts$ycoord[roost_num]))
print(plot)
save[paste0("logistic", roost_num)] <- predict(fit, save)*max_bats
return(save)
}
exponential_pred <- function(d, roost_num, r){
d['dist'] <- d[paste0("dist", roost_num)]
save <- d
d <- d[d['dist']<r,]
fit <- lm(log(bats) ~ log(dist), data = d)
plot <- ggplot(d) +
geom_point(aes(x=dist, y=bats)) +
geom_line(aes(x=dist, y=exp(fit$fitted.values)), color = "red") +
ggtitle(paste("exponential", bat_roosts$xcoord[roost_num], bat_roosts$ycoord[roost_num]))
print(plot)
save[paste0("exponential", roost_num)] <- exp(predict(fit, save))
return(save)
}
for (i in 1:nrow(bat_roosts)){
bat_occ_df <- logistic_pred(d=bat_occ_df, roost_num=i, r=0.05)
}
for (i in 1:nrow(bat_roosts)){
bat_occ_df <- exponential_pred(d=bat_occ_df, roost_num=i, r=0.05)
}
# 4: add together the predictions for each roost regression
# and
# 5: subtract the total roost regression from the bats
corrected_pred <- function(d, func="logistic"){
d[func] <- 0
for (i in 1:nrow(bat_roosts)){
d[func] <- d[func] + d[paste0(func, i)]
}
d[paste0(func, "_pred")] <- d["bats"] - d[func] + min(d[func])
return(d)
}
bat_occ_df <- corrected_pred(bat_occ_df, func="logistic")
bat_occ_df <- corrected_pred(bat_occ_df, func="exponential")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stars) # ʻstarsʻ requires 'sf' 0.9.8 was found, but >= 1.0.3
#library(raster)
library(sf)
library(terra)
library(exactextractr)
library(here)
library(splines)
library(ggplot2)
# bat occurance data
bat_occ <- rast(here("data","aggregated_data", "2017_aggregate_2017.tif"))
# roost location
bat_roosts <- st_read(here("data", "ca_bat_roosts", "ca_colonies.shp")) %>% st_make_valid()
# turn bat occ data into a dataframe
bat_occ_df <- as.data.frame(bat_occ, xy=TRUE)
names(bat_occ_df) <- c("x", "y", "bats")
# x locations of roosts
x_roosts <- bat_roosts$xcoord
# y locations of roosts
y_roosts <- bat_roosts$ycoord
# plot out the raw bat data
# ggplot() +
#   geom_raster(data = bat_occ_df, aes(x=x, y=y, fill=bats)) +
#   geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord))
# spline <- lm(formula = bats ~ bs(x, degree = 3, knots = x_roosts)*bs(y, degree = 3, knots = y_roosts) , data = bat_occ_df)
# bat_occ_df$spline <- spline$fitted.values
# ggplot() +
#   geom_raster(data = bat_occ_df, aes(x=x, y=y, fill=spline)) +
#   geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord))
# Make a function that only keeps points that are within r from a point
spot_filter <- function(d, x_center, y_center, r){
# first do a rough approximation
d <- filter(d, x > x_center-r, x < x_center+r, y > y_center-r, y < y_center+r)
# then go over and get rid of the corners
d$dist = sqrt((d$x - x_center)^2+(d$y - y_center)^2)
d <- d[d$dist<r,]
return(d)
}
d <- spot_filter(d=bat_occ_df, x_center=x_roosts[1], y_center=y_roosts[1], r=0.05)
ggplot(d) +
geom_point(aes(x=dist, y=bats))
# fit some exponential
# fit <- lm(log(bats) ~ log(dist), data = d)
# ggplot(d) +
#   geom_point(aes(x=dist, y=bats)) +
#   geom_line(aes(x=dist, y=exp(fit$fitted.values)), color = "red")
# fit a logistic
# fit <- glm(bats/max(bats) ~ dist, family = "binomial", data = d)
# ggplot(d) +
#   geom_point(aes(x=dist, y=bats)) +
#   geom_line(aes(x=dist, y=fit$fitted.values*max(bats)), color = "red")
# 1: add a column for distance to each roost to bat_occ_df
add_dist_col <- function(d, roost_num){
x_center = bat_roosts$xcoord[roost_num]
y_center = bat_roosts$ycoord[roost_num]
d[paste0("dist", roost_num)] = sqrt((d$x - x_center)^2+(d$y - y_center)^2)
return(d)
}
for (i in 1:nrow(bat_roosts)){
bat_occ_df <- add_dist_col(bat_occ_df, i)
}
# 2: Fit a separate logistic regression for each roost based on the closest 0.05 degrees
# and
# 3: generate predictions for each roost regression
logistic_pred <- function(d, roost_num, r){
d['dist'] <- d[paste0("dist", roost_num)]
save <- d
d <- d[d['dist']<r,]
max_bats = max(d$bats)
fit <- glm(bats/max_bats ~ dist, family = "binomial", data = d)
plot <- ggplot(d) +
geom_point(aes(x=dist, y=bats)) +
geom_line(aes(x=dist, y=fit$fitted.values*max_bats), color = "red") +
ggtitle(paste("logistic", bat_roosts$xcoord[roost_num], bat_roosts$ycoord[roost_num]))
print(plot)
save[paste0("logistic", roost_num)] <- predict(fit, save)*max_bats
return(save)
}
exponential_pred <- function(d, roost_num, r){
d['dist'] <- d[paste0("dist", roost_num)]
save <- d
d <- d[d['dist']<r,]
fit <- lm(log(bats) ~ log(dist), data = d)
plot <- ggplot(d) +
geom_point(aes(x=dist, y=bats)) +
geom_line(aes(x=dist, y=exp(fit$fitted.values)), color = "red") +
ggtitle(paste("exponential", bat_roosts$xcoord[roost_num], bat_roosts$ycoord[roost_num]))
print(plot)
save[paste0("exponential", roost_num)] <- exp(predict(fit, save))
return(save)
}
for (i in 1:nrow(bat_roosts)){
bat_occ_df <- logistic_pred(d=bat_occ_df, roost_num=i, r=0.05)
}
for (i in 1:nrow(bat_roosts)){
bat_occ_df <- exponential_pred(d=bat_occ_df, roost_num=i, r=0.05)
}
# 4: add together the predictions for each roost regression
# and
# 5: subtract the total roost regression from the bats
corrected_pred <- function(d, func="logistic"){
d[func] <- 0
for (i in 1:nrow(bat_roosts)){
d[func] <- d[func] + d[paste0(func, i)]
}
d[paste0(func, "_pred")] <- d["bats"] - d[func] + min(d[func])
return(d)
}
bat_occ_df <- corrected_pred(bat_occ_df, func="logistic")
bat_occ_df <- corrected_pred(bat_occ_df, func="exponential")
# 4: add together the predictions for each roost regression
# and
# 5: subtract the total roost regression from the bats
corrected_pred <- function(d, func="logistic"){
d[func] <- 0
for (i in 1:nrow(bat_roosts)){
d[func] <- d[func] + d[paste0(func, i)]
}
d[paste0(func, "_pred")] <- d["bats"] - d[func] + min(d[func])
return(d)
}
bat_occ_df <- corrected_pred(bat_occ_df, func="logistic")
bat_occ_df <- corrected_pred(bat_occ_df, func="exponential")
# plot out results for exponential
ggplot() +
geom_raster(data = bat_occ_df, aes(x=x, y=y, fill=bats)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("original_bats")
ggplot() +
geom_raster(data = bat_occ_df, aes(x=x, y=y, fill=exponential)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("exponential_predictions")
ggplot() +
geom_raster(data = bat_occ_df, aes(x=x, y=y, fill=bats)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("original_bats")
ggplot() +
geom_raster(data = bat_occ_df, aes(x=x, y=y, fill=exponential)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("exponential_predictions")
ggplot() +
geom_raster(data = bat_occ_df, aes(x=x, y=y, fill=exponential_pred)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("exponential_corrected_bats")
far_from_roosts <- filter(bat_occ_df,
dist1 > 0.01,
dist2 > 0.01,
dist3 > 0.01,
dist4 > 0.01,
dist5 > 0.01,
dist6 > 0.01,
dist7 > 0.01,
dist8 > 0.01)
ggplot() +
geom_raster(data = far_from_roosts, aes(x=x, y=y, fill=exponential_pred)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("exponential_corrected_bats (0.01 degrees from roosts)")
ggplot() +
geom_raster(data = negative, aes(x=x, y=y, fill=exponential_pred)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("exponential_corrected_bats (0.01 degrees from roosts)")
negative <- filter(bat_occ_df, exponential_pred < 0)
ggplot() +
geom_raster(data = negative, aes(x=x, y=y, fill=exponential_pred)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("exponential_corrected_bats (0.01 degrees from roosts)")
negative <- filter(bat_occ_df, exponential_pred < 0)
ggplot() +
geom_raster(data = negative, aes(x=x, y=y, fill=exponential)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("exponential_corrected_bats (0.01 degrees from roosts)") +
scale_fill_distiller(palette="Spectral", direction = 1)
ggplot() +
geom_raster(data = far_from_roosts, aes(x=x, y=y, fill=exponential)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("exponential_corrected_bats (0.01 degrees from roosts)") +
scale_fill_distiller(palette="Spectral", direction = 1)
# 4: add together the predictions for each roost regression
# and
# 5: subtract the total roost regression from the bats
corrected_pred <- function(d, func="logistic"){
d[func] <- 0
for (i in 1:nrow(bat_roosts)){
d[func] <- d[func] + d[paste0(func, i)]
}
d[func] = d[func] - min(d[func]) # remove baseline bat presence from the model
d[paste0(func, "_pred")] <- d["bats"] - d[func]
return(d)
}
bat_occ_df <- corrected_pred(bat_occ_df, func="logistic")
bat_occ_df <- corrected_pred(bat_occ_df, func="exponential")
ggplot() +
geom_raster(data = bat_occ_df, aes(x=x, y=y, fill=bats)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("original_bats") +
scale_fill_distiller(palette="Spectral", direction = 1)
far_from_roosts <- filter(bat_occ_df,
dist1 > 0.01,
dist2 > 0.01,
dist3 > 0.01,
dist4 > 0.01,
dist5 > 0.01,
dist6 > 0.01,
dist7 > 0.01,
dist8 > 0.01)
ggplot() +
geom_raster(data = far_from_roosts, aes(x=x, y=y, fill=exponential)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("exponential_corrected_bats (0.01 degrees from roosts)") +
scale_fill_distiller(palette="Spectral", direction = 1)
ggplot() +
geom_raster(data = far_from_roosts, aes(x=x, y=y, fill=exponential_pred)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("exponential_corrected_bats (0.01 degrees from roosts)")
negative <- filter(bat_occ_df, exponential_pred < 0)
ggplot() +
geom_raster(data = negative, aes(x=x, y=y, fill=exponential_pred)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("exponential_corrected_bats where negative (0.01 degrees from roosts)")
ggplot() +
geom_raster(data = far_from_roosts, aes(x=x, y=y, fill=exponential_pred)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("exponential_corrected_bats (0.01 degrees from roosts)")
ggplot() +
geom_raster(data = far_from_roosts, aes(x=x, y=y, fill=exponential)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("exponential_corrected_bats (0.01 degrees from roosts)") +
scale_fill_distiller(palette="Spectral", direction = 1)
ggplot() +
geom_raster(data = bat_occ_df, aes(x=x, y=y, fill=bats)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("original_bats") +
scale_fill_distiller(palette="Spectral", direction = 1)
ggplot() +
geom_raster(data = far_from_roosts, aes(x=x, y=y, fill=exponential_pred)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("exponential_corrected_bats (0.01 degrees from roosts)") +
scale_fill_distiller(palette="Spectral", direction = 1)
corrected_pred <- function(d, func="logistic"){
d[func] <- 0
for (i in 1:nrow(bat_roosts)){
d[func] <- d[func] + d[paste0(func, i)]
}
d[func] = d[func] - min(d[func]) # remove baseline bat presence from the model
d[paste0(func, "_pred")] <- ifelse(d["bats"] - d[func] >=0, d["bats"] - d[func], 0)
return(d)
}
bat_occ_df <- corrected_pred(bat_occ_df, func="logistic")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stars) # ʻstarsʻ requires 'sf' 0.9.8 was found, but >= 1.0.3
#library(raster)
library(sf)
library(terra)
library(exactextractr)
library(here)
library(splines)
library(ggplot2)
# bat occurance data
bat_occ <- rast(here("data","aggregated_data", "2017_aggregate_2017.tif"))
# roost location
bat_roosts <- st_read(here("data", "ca_bat_roosts", "ca_colonies.shp")) %>% st_make_valid()
# turn bat occ data into a dataframe
bat_occ_df <- as.data.frame(bat_occ, xy=TRUE)
names(bat_occ_df) <- c("x", "y", "bats")
# x locations of roosts
x_roosts <- bat_roosts$xcoord
# y locations of roosts
y_roosts <- bat_roosts$ycoord
# 1: add a column for distance to each roost to bat_occ_df
add_dist_col <- function(d, roost_num){
x_center = bat_roosts$xcoord[roost_num]
y_center = bat_roosts$ycoord[roost_num]
d[paste0("dist", roost_num)] = sqrt((d$x - x_center)^2+(d$y - y_center)^2)
return(d)
}
for (i in 1:nrow(bat_roosts)){
bat_occ_df <- add_dist_col(bat_occ_df, i)
}
# 2: Fit a separate logistic regression for each roost based on the closest 0.05 degrees
# and
# 3: generate predictions for each roost regression
# logistic_pred <- function(d, roost_num, r){
#   d['dist'] <- d[paste0("dist", roost_num)]
#   save <- d
#   d <- d[d['dist']<r,]
#   max_bats = max(d$bats)
#   fit <- glm(bats/max_bats ~ dist, family = "binomial", data = d)
#
#   plot <- ggplot(d) +
#     geom_point(aes(x=dist, y=bats)) +
#     geom_line(aes(x=dist, y=fit$fitted.values*max_bats), color = "red") +
#     ggtitle(paste("logistic", bat_roosts$xcoord[roost_num], bat_roosts$ycoord[roost_num]))
#   print(plot)
#
#   save[paste0("logistic", roost_num)] <- predict(fit, save)*max_bats
#   return(save)
# }
exponential_pred <- function(d, roost_num, r){
d['dist'] <- d[paste0("dist", roost_num)]
save <- d
d <- d[d['dist']<r,]
fit <- lm(log(bats) ~ log(dist), data = d)
plot <- ggplot(d) +
geom_point(aes(x=dist, y=bats)) +
geom_line(aes(x=dist, y=exp(fit$fitted.values)), color = "red") +
ggtitle(paste("exponential", bat_roosts$xcoord[roost_num], bat_roosts$ycoord[roost_num]))
print(plot)
save[paste0("exponential", roost_num)] <- exp(predict(fit, save))
return(save)
}
for (i in 1:nrow(bat_roosts)){
bat_occ_df <- exponential_pred(d=bat_occ_df, roost_num=i, r=0.05)
}
# 4: add together the predictions for each roost regression
# and
# 5: subtract the total roost regression from the bats
corrected_pred <- function(d, func="logistic"){
d[func] <- 0
for (i in 1:nrow(bat_roosts)){
d[func] <- d[func] + d[paste0(func, i)]
}
d[func] = d[func] - min(d[func]) # remove baseline bat presence from the model
d[paste0(func, "_pred")] <- d["bats"] - d[func]
return(d)
}
# bat_occ_df <- corrected_pred(bat_occ_df, func="logistic")
bat_occ_df <- corrected_pred(bat_occ_df, func="exponential")
# plot out results for exponential
far_from_roosts <- filter(bat_occ_df,
dist1 > 0.01,
dist2 > 0.01,
dist3 > 0.01,
dist4 > 0.01,
dist5 > 0.01,
dist6 > 0.01,
dist7 > 0.01,
dist8 > 0.01)
ggplot() +
geom_raster(data = far_from_roosts, aes(x=x, y=y, fill=bats)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("original_bats") +
scale_fill_distiller(palette="Spectral", direction = 1)
ggplot() +
geom_raster(data = far_from_roosts, aes(x=x, y=y, fill=exponential)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("exponential_corrected_bats (0.01 degrees from roosts)") +
scale_fill_distiller(palette="Spectral", direction = 1)
ggplot() +
geom_raster(data = far_from_roosts, aes(x=x, y=y, fill=exponential_pred)) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("exponential_corrected_bats (0.01 degrees from roosts)") +
scale_fill_distiller(palette="Spectral", direction = 1)
# because everything is negative,
ggplot() +
geom_raster(data = far_from_roosts, aes(x=x, y=y, fill=exponential_pred + min(exponential_pred))) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("exponential_corrected_bats (0.01 degrees from roosts)") +
scale_fill_distiller(palette="Spectral", direction = 1)
# because everything is negative,
ggplot() +
geom_raster(data = far_from_roosts, aes(x=x, y=y, fill=exponential_pred - min(exponential_pred))) +
geom_point(data = bat_roosts, aes(x=xcoord, y=ycoord)) +
ggtitle("exponential_corrected_bats (0.01 degrees from roosts)") +
scale_fill_distiller(palette="Spectral", direction = 1)
# ok what happens if you train it on the whole thing instead
for (i in 1:nrow(bat_roosts)){
bat_occ_df <- exponential_pred(d=bat_occ_df, roost_num=i, r=1)
}
# ok what happens if you train it on the whole thing instead
exponential_pred <- function(d, roost_num){
d['dist'] <- d[paste0("dist", roost_num)]
save <- d
fit <- lm(log(bats) ~ log(dist), data = d)
plot <- ggplot(d) +
geom_point(aes(x=dist, y=bats)) +
geom_line(aes(x=dist, y=exp(fit$fitted.values)), color = "red") +
ggtitle(paste("exponential_full", bat_roosts$xcoord[roost_num], bat_roosts$ycoord[roost_num]))
print(plot)
save[paste0("exponential_full", roost_num)] <- exp(predict(fit, save))
return(save)
}
for (i in 1:nrow(bat_roosts)){
bat_occ_df <- exponential_pred(d=bat_occ_df, roost_num=i)
}
# ok what happens if you train it on the whole thing instead
exponential_pred <- function(d, roost_num){
d['dist'] <- d[paste0("dist", roost_num)]
save <- d
fit <- lm(log(bats + 1) ~ log(dist), data = d)
plot <- ggplot(d) +
geom_point(aes(x=dist, y=bats)) +
geom_line(aes(x=dist, y=exp(fit$fitted.values)), color = "red") +
ggtitle(paste("exponential_full", bat_roosts$xcoord[roost_num], bat_roosts$ycoord[roost_num]))
print(plot)
save[paste0("exponential_full", roost_num)] <- exp(predict(fit, save))
return(save)
}
for (i in 1:nrow(bat_roosts)){
bat_occ_df <- exponential_pred(d=bat_occ_df, roost_num=i)
}
exponential_pred <- function(d, roost_num, r){
d['dist'] <- d[paste0("dist", roost_num)]
save <- d
d <- d[d['dist']<r,]
fit <- lm(log(bats + 1) ~ log(dist), data = d)
plot <- ggplot(d) +
geom_point(aes(x=dist, y=bats)) +
geom_line(aes(x=dist, y=exp(fit$fitted.values)-1), color = "red") +
ggtitle(paste("exponential", bat_roosts$xcoord[roost_num], bat_roosts$ycoord[roost_num]))
print(plot)
save[paste0("exponential", roost_num)] <- exp(predict(fit, save))
return(save)
}
exponential_pred <- function(d, roost_num, r){
d['dist'] <- d[paste0("dist", roost_num)]
save <- d
d <- d[d['dist']<r,]
fit <- lm(log(bats + 1) ~ log(dist), data = d)
plot <- ggplot(d) +
geom_point(aes(x=dist, y=bats)) +
geom_line(aes(x=dist, y=exp(fit$fitted.values)-1), color = "red") +
ggtitle(paste("exponential", bat_roosts$xcoord[roost_num], bat_roosts$ycoord[roost_num]))
print(plot)
save[paste0("exponential", roost_num)] <- exp(predict(fit, save))-1
return(save)
}
